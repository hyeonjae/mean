angular.module("myapp",["ngRoute"]),angular.module("myapp").controller("LoginCtrl",["$scope","UserSvc",function(t,e){t.login=function(t,o){e.login(t,o).then(function(t){console.log(t)})}}]),angular.module("myapp").controller("PostsCtrl",["$scope","PostsSvc",function(t,e){e.fetch().success(function(e){t.posts=e}),t.addPost=function(){var o=t.postBody;_.trim(o).length>0&&e.create({username:"hyeonjae",body:t.postBody}).success(function(e){t.posts.unshift(e),t.postBody=""})}}]),angular.module("myapp").service("PostsSvc",["$http",function(t){this.fetch=function(){return t.get("/api/posts")},this.create=function(e){return t.post("/api/posts",e)}}]),angular.module("myapp").config(["$routeProvider",function(t){t.when("/",{controller:"PostsCtrl",templateUrl:"posts.html"}).when("/register",{controller:"RegisterCtrl",templateUrl:"register.html"}).when("/login",{controller:"LoginCtrl",templateUrl:"login.html"})}]),angular.module("myapp").service("UserSvc",["$http",function(t){var e=this;e.getUser=function(){return t.get("/api/users",{headers:{"X-Auth":this.token}})},e.login=function(o,n){return t.post("/api/sessions",{username:o,password:n}).then(function(t){return e.token=t.data,e.getUser()})}}]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyJdLCJuYW1lcyI6WyJhbmd1bGFyIiwibW9kdWxlIiwiY29udHJvbGxlciIsIiRzY29wZSIsIlVzZXJTdmMiLCJsb2dpbiIsInVzZXJuYW1lIiwicGFzc3dvcmQiLCJ0aGVuIiwidXNlciIsImNvbnNvbGUiLCJsb2ciLCJQb3N0c1N2YyIsImZldGNoIiwic3VjY2VzcyIsInBvc3RzIiwiYWRkUG9zdCIsInBvc3RCb2R5IiwiXyIsInRyaW0iLCJsZW5ndGgiLCJjcmVhdGUiLCJib2R5IiwicG9zdCIsInVuc2hpZnQiLCJzZXJ2aWNlIiwiJGh0dHAiLCJ0aGlzIiwiZ2V0IiwiY29uZmlnIiwiJHJvdXRlUHJvdmlkZXIiLCJ3aGVuIiwidGVtcGxhdGVVcmwiLCJzdmMiLCJnZXRVc2VyIiwiaGVhZGVycyIsIlgtQXV0aCIsInRva2VuIiwidmFsIiwiZGF0YSJdLCJtYXBwaW5ncyI6IkFBQUFBLFFBQVFDLE9BQU8sU0FDZCxZQUlERCxRQUFRQyxPQUFPLFNBQ2RDLFdBQVcsYUFBYyxTQUFVLFVBQVcsU0FBU0MsRUFBUUMsR0FFNURELEVBQU9FLE1BQVEsU0FBU0MsRUFBVUMsR0FDOUJILEVBQVFDLE1BQU1DLEVBQVVDLEdBQ25CQyxLQUFLLFNBQVNDLEdBQ1hDLFFBQVFDLElBQUlGLFNBTTVCVCxRQUFRQyxPQUFPLFNBQ2RDLFdBQVcsYUFBYyxTQUFVLFdBQVksU0FBU0MsRUFBUVMsR0FFN0RBLEVBQVNDLFFBQVFDLFFBQVEsU0FBU0MsR0FDOUJaLEVBQU9ZLE1BQVFBLElBR25CWixFQUFPYSxRQUFVLFdBQ2IsR0FBSUMsR0FBV2QsRUFBT2MsUUFDbEJDLEdBQUVDLEtBQUtGLEdBQVVHLE9BQVMsR0FFMUJSLEVBQVNTLFFBQ0xmLFNBQVUsV0FDVmdCLEtBQU1uQixFQUFPYyxXQUVoQkgsUUFBUSxTQUFTUyxHQUNkcEIsRUFBT1ksTUFBTVMsUUFBUUQsR0FDckJwQixFQUFPYyxTQUFXLFNBT2xDakIsUUFBUUMsT0FBTyxTQUNkd0IsUUFBUSxZQUFhLFFBQVMsU0FBU0MsR0FDcENDLEtBQUtkLE1BQVEsV0FDVCxNQUFPYSxHQUFNRSxJQUFJLGVBR3hCRCxLQUFLTixPQUFTLFNBQVVFLEdBQ2pCLE1BQU9HLEdBQU1ILEtBQUssYUFBY0EsT0FLeEN2QixRQUFRQyxPQUFPLFNBQ2Q0QixRQUFBLGlCQUFPLFNBQVNDLEdBQ2hCQSxFQUNFQyxLQUFLLEtBQU03QixXQUFZLFlBQWE4QixZQUFhLGVBQ2pERCxLQUFLLGFBQWM3QixXQUFZLGVBQWdCOEIsWUFBYSxrQkFDNURELEtBQUssVUFBVzdCLFdBQVksWUFBYThCLFlBQWEsa0JBRXpEaEMsUUFBUUMsT0FBTyxTQUNkd0IsUUFBUSxXQUFBLFFBQVcsU0FBU0MsR0FDNUIsR0FBSU8sR0FBTU4sSUFDVk0sR0FBSUMsUUFBVSxXQUNiLE1BQU9SLEdBQU1FLElBQUksY0FDaEJPLFNBQVdDLFNBQVVULEtBQUtVLFVBSTVCSixFQUFJNUIsTUFBUSxTQUFTQyxFQUFVQyxHQUM5QixNQUFPbUIsR0FBTUgsS0FBSyxpQkFDakJqQixTQUFVQSxFQUNWQyxTQUFVQSxJQUNSQyxLQUFLLFNBQVM4QixHQUVoQixNQURBTCxHQUFJSSxNQUFRQyxFQUFJQyxLQUNUTixFQUFJQyIsImZpbGUiOiJhcHAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJhbmd1bGFyLm1vZHVsZSgnbXlhcHAnLCBbXG5cdCduZ1JvdXRlJ1xuXSk7XG5cblxuYW5ndWxhci5tb2R1bGUoJ215YXBwJylcbi5jb250cm9sbGVyKCdMb2dpbkN0cmwnLCBbJyRzY29wZScsICdVc2VyU3ZjJywgZnVuY3Rpb24oJHNjb3BlLCBVc2VyU3ZjKSB7XG4gICAgXG4gICAgJHNjb3BlLmxvZ2luID0gZnVuY3Rpb24odXNlcm5hbWUsIHBhc3N3b3JkKSB7XG4gICAgICAgIFVzZXJTdmMubG9naW4odXNlcm5hbWUsIHBhc3N3b3JkKVxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24odXNlcikge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHVzZXIpO1xuICAgICAgICAgICAgfSk7XG4gICAgfVxufV0pO1xuXG5cbmFuZ3VsYXIubW9kdWxlKCdteWFwcCcpXG4uY29udHJvbGxlcignUG9zdHNDdHJsJywgWyckc2NvcGUnLCAnUG9zdHNTdmMnLCBmdW5jdGlvbigkc2NvcGUsIFBvc3RzU3ZjKSB7XG4gICAgXG4gICAgUG9zdHNTdmMuZmV0Y2goKS5zdWNjZXNzKGZ1bmN0aW9uKHBvc3RzKSB7XG4gICAgICAgICRzY29wZS5wb3N0cyA9IHBvc3RzO1xuICAgIH0pO1xuXG4gICAgJHNjb3BlLmFkZFBvc3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBwb3N0Qm9keSA9ICRzY29wZS5wb3N0Qm9keTtcbiAgICAgICAgaWYgKF8udHJpbShwb3N0Qm9keSkubGVuZ3RoID4gMCkge1xuXG4gICAgICAgICAgICBQb3N0c1N2Yy5jcmVhdGUoe1xuICAgICAgICAgICAgICAgIHVzZXJuYW1lOiAnaHllb25qYWUnLFxuICAgICAgICAgICAgICAgIGJvZHk6ICRzY29wZS5wb3N0Qm9keVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5zdWNjZXNzKGZ1bmN0aW9uKHBvc3QpIHtcbiAgICAgICAgICAgICAgICAkc2NvcGUucG9zdHMudW5zaGlmdChwb3N0KTtcbiAgICAgICAgICAgICAgICAkc2NvcGUucG9zdEJvZHkgPSAnJztcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfTtcbn1dKTtcblxuXG5hbmd1bGFyLm1vZHVsZSgnbXlhcHAnKVxuLnNlcnZpY2UoJ1Bvc3RzU3ZjJywgWyckaHR0cCcsIGZ1bmN0aW9uKCRodHRwKSB7XG4gICAgdGhpcy5mZXRjaCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuICRodHRwLmdldCgnL2FwaS9wb3N0cycpO1xuICAgIH1cblxuXHR0aGlzLmNyZWF0ZSA9IGZ1bmN0aW9uIChwb3N0KSB7XG4gICAgICAgIHJldHVybiAkaHR0cC5wb3N0KCcvYXBpL3Bvc3RzJywgcG9zdCk7XG4gICAgfVxufV0pO1xuXG5cbmFuZ3VsYXIubW9kdWxlKCdteWFwcCcpXG4uY29uZmlnKGZ1bmN0aW9uKCRyb3V0ZVByb3ZpZGVyKSB7XG5cdCRyb3V0ZVByb3ZpZGVyXG5cdFx0LndoZW4oJy8nLCB7Y29udHJvbGxlcjogJ1Bvc3RzQ3RybCcsIHRlbXBsYXRlVXJsOiAncG9zdHMuaHRtbCd9KVxuXHRcdC53aGVuKCcvcmVnaXN0ZXInLCB7Y29udHJvbGxlcjogJ1JlZ2lzdGVyQ3RybCcsIHRlbXBsYXRlVXJsOiAncmVnaXN0ZXIuaHRtbCd9KVxuXHRcdC53aGVuKCcvbG9naW4nLCB7Y29udHJvbGxlcjogJ0xvZ2luQ3RybCcsIHRlbXBsYXRlVXJsOiAnbG9naW4uaHRtbCd9KTtcbn0pO1xuYW5ndWxhci5tb2R1bGUoJ215YXBwJylcbi5zZXJ2aWNlKCdVc2VyU3ZjJywgZnVuY3Rpb24oJGh0dHApIHtcblx0dmFyIHN2YyA9IHRoaXM7XG5cdHN2Yy5nZXRVc2VyID0gZnVuY3Rpb24gKCkge1xuXHRcdHJldHVybiAkaHR0cC5nZXQoJy9hcGkvdXNlcnMnLCB7XG5cdFx0XHRoZWFkZXJzOiB7ICdYLUF1dGgnOiB0aGlzLnRva2VuIH1cblx0XHR9KTtcblx0fTtcblxuXHRzdmMubG9naW4gPSBmdW5jdGlvbih1c2VybmFtZSwgcGFzc3dvcmQpIHtcblx0XHRyZXR1cm4gJGh0dHAucG9zdCgnL2FwaS9zZXNzaW9ucycsIHtcblx0XHRcdHVzZXJuYW1lOiB1c2VybmFtZSwgXG5cdFx0XHRwYXNzd29yZDogcGFzc3dvcmRcblx0XHR9KS50aGVuKGZ1bmN0aW9uKHZhbCkge1xuXHRcdFx0c3ZjLnRva2VuID0gdmFsLmRhdGE7XG5cdFx0XHRyZXR1cm4gc3ZjLmdldFVzZXIoKTtcblx0XHR9KTtcblx0fTtcbn0pO1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9